# PIPELINE DEFINITION
# Name: mnist-prediction-pipeline
# Description: A pipeline to predict digits using MNIST model from MinIO
# Inputs:
#    access_key: str
#    image_name: str
#    s3_bucket: str
#    s3_endpoint: str
#    secret_key: str
components:
  comp-predict-image-from-minio:
    executorLabel: exec-predict-image-from-minio
    inputDefinitions:
      parameters:
        access_key:
          parameterType: STRING
        image_name:
          parameterType: STRING
        s3_bucket:
          parameterType: STRING
        s3_endpoint:
          parameterType: STRING
        secret_key:
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: NUMBER_INTEGER
deploymentSpec:
  executors:
    exec-predict-image-from-minio:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - predict_image_from_minio
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 's3fs'\
          \ 'boto3' 'numpy' 'tensorflow' 'Pillow' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef predict_image_from_minio(\n    image_name: str, \n    s3_bucket:\
          \ str, \n    s3_endpoint: str, \n    access_key: str, \n    secret_key:\
          \ str\n) -> int:\n    \"\"\"\n    This function loads an image from MinIO,\
          \ preprocesses it, and uses the MNIST model to predict the digit.\n    \"\
          \"\"\n\n    import numpy as np\n    import boto3\n    from tensorflow.keras.models\
          \ import load_model\n    from tensorflow.keras.preprocessing.image import\
          \ img_to_array, load_img\n    import os\n\n    # Step 1: Set up the MinIO\
          \ client using boto3\n    s3 = boto3.client(\n        's3',\n        endpoint_url=s3_endpoint,\n\
          \        aws_access_key_id=access_key,\n        aws_secret_access_key=secret_key\n\
          \    )\n\n    # Step 2: Load the MNIST model from MinIO\n    model_key =\
          \ 'sushant_model/detect-digits.h5'\n    response_model = s3.get_object(Bucket=s3_bucket,\
          \ Key=model_key)\n\n    # Save the model content to a temporary file\n \
          \   model_temp_path = \"/tmp/mnist_model.h5\"\n    with open(model_temp_path,\
          \ 'wb') as model_file:\n        model_file.write(response_model['Body'].read())\n\
          \    mnist_model = load_model(model_temp_path)\n\n    # Step 3: Preprocess\
          \ the image for MNIST model\n    def preprocess_image(image_path: str) ->\
          \ np.ndarray:\n        \"\"\"\n        Preprocesses the image to match the\
          \ input format required by the MNIST model.\n        \"\"\"\n        img\
          \ = load_img(image_path, color_mode=\"grayscale\", target_size=(28, 28))\n\
          \        img_array = img_to_array(img)\n        img_array = img_array /\
          \ 255.0  # Normalize the image\n        img_array = np.expand_dims(img_array,\
          \ axis=0)  # Add batch dimension\n        return img_array\n\n    # Step\
          \ 4: Download the image from MinIO\n    image_object = s3.get_object(Bucket=s3_bucket,\
          \ Key=image_name)\n    image_temp_path = '/tmp/' + os.path.basename(image_name)\
          \  # Save to a temporary file\n    with open(image_temp_path, 'wb') as image_file:\n\
          \        image_file.write(image_object['Body'].read())\n\n    # Step 5:\
          \ Preprocess the downloaded image\n    preprocessed_image = preprocess_image(image_temp_path)\n\
          \n    # Step 6: Make a prediction using the MNIST model\n    predictions\
          \ = mnist_model.predict(preprocessed_image)\n    predicted_digit = np.argmax(predictions)\
          \  # Get the predicted digit as the class with the highest probability\n\
          \n    return predicted_digit\n\n"
        image: tensorflow/tensorflow:latest
pipelineInfo:
  description: A pipeline to predict digits using MNIST model from MinIO
  name: mnist-prediction-pipeline
root:
  dag:
    tasks:
      predict-image-from-minio:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-predict-image-from-minio
        inputs:
          parameters:
            access_key:
              componentInputParameter: access_key
            image_name:
              componentInputParameter: image_name
            s3_bucket:
              componentInputParameter: s3_bucket
            s3_endpoint:
              componentInputParameter: s3_endpoint
            secret_key:
              componentInputParameter: secret_key
        taskInfo:
          name: Digit Prediction
  inputDefinitions:
    parameters:
      access_key:
        parameterType: STRING
      image_name:
        parameterType: STRING
      s3_bucket:
        parameterType: STRING
      s3_endpoint:
        parameterType: STRING
      secret_key:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.10.1
